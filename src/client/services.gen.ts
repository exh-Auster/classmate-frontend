// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { HealthcheckGetError, HealthcheckGetResponse, GetAllUsersUserGetError, GetAllUsersUserGetResponse, CreateUserUserPostData, CreateUserUserPostError, CreateUserUserPostResponse, GetUserByIdUserUserIdGetData, GetUserByIdUserUserIdGetError, GetUserByIdUserUserIdGetResponse, GetMemberGroupsByUserIdUserUserIdGroupsGetData, GetMemberGroupsByUserIdUserUserIdGroupsGetError, GetMemberGroupsByUserIdUserUserIdGroupsGetResponse, CreateGroupGroupPostData, CreateGroupGroupPostError, CreateGroupGroupPostResponse, GetGroupByIdGroupGroupIdGetData, GetGroupByIdGroupGroupIdGetError, GetGroupByIdGroupGroupIdGetResponse, CreatePostPostPostData, CreatePostPostPostError, CreatePostPostPostResponse, GetPostByIdPostPostIdGetData, GetPostByIdPostPostIdGetError, GetPostByIdPostPostIdGetResponse, DeletePostByIdPostPostIdDeleteData, DeletePostByIdPostPostIdDeleteError, DeletePostByIdPostPostIdDeleteResponse, CreateCommentPostPostIdCommentPostData, CreateCommentPostPostIdCommentPostError, CreateCommentPostPostIdCommentPostResponse, GetCommentsByPostIdPostPostIdCommentGetData, GetCommentsByPostIdPostPostIdCommentGetError, GetCommentsByPostIdPostPostIdCommentGetResponse, DeleteCommentByIdPostPostIdCommentCommentIdDeleteData, DeleteCommentByIdPostPostIdCommentCommentIdDeleteError, DeleteCommentByIdPostPostIdCommentCommentIdDeleteResponse, LikePostPostPostIdLikePostData, LikePostPostPostIdLikePostError, LikePostPostPostIdLikePostResponse, GetLikesByPostIdPostPostIdLikeGetData, GetLikesByPostIdPostPostIdLikeGetError, GetLikesByPostIdPostPostIdLikeGetResponse, RemoveLikesPostsPostIdLikeDeleteData, RemoveLikesPostsPostIdLikeDeleteError, RemoveLikesPostsPostIdLikeDeleteResponse, GetPostsByUserIdUserUserIdPostsGetData, GetPostsByUserIdUserUserIdPostsGetError, GetPostsByUserIdUserUserIdPostsGetResponse, JoinGroupUserUserIdGroupsGroupIdJoinPostData, JoinGroupUserUserIdGroupsGroupIdJoinPostError, JoinGroupUserUserIdGroupsGroupIdJoinPostResponse } from './types.gen';

export const client = createClient(createConfig());
client.setConfig({
    baseURL: process.env.NEXT_PUBLIC_API_BASE_URL
  })


/**
 * Healthcheck
 */
export const healthcheckGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthcheckGetResponse, HealthcheckGetError, ThrowOnError>({
        ...options,
        url: '/'
    });
};

/**
 * Get All Users
 */
export const getAllUsersUserGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllUsersUserGetResponse, GetAllUsersUserGetError, ThrowOnError>({
        ...options,
        url: '/user/'
    });
};

/**
 * Create User
 */
export const createUserUserPost = <ThrowOnError extends boolean = false>(options: Options<CreateUserUserPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateUserUserPostResponse, CreateUserUserPostError, ThrowOnError>({
        ...options,
        url: '/user/'
    });
};

/**
 * Get User By Id
 */
export const getUserByIdUserUserIdGet = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdUserUserIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserByIdUserUserIdGetResponse, GetUserByIdUserUserIdGetError, ThrowOnError>({
        ...options,
        url: '/user/{user_id}'
    });
};

/**
 * Get Member Groups By User Id
 */
export const getMemberGroupsByUserIdUserUserIdGroupsGet = <ThrowOnError extends boolean = false>(options: Options<GetMemberGroupsByUserIdUserUserIdGroupsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMemberGroupsByUserIdUserUserIdGroupsGetResponse, GetMemberGroupsByUserIdUserUserIdGroupsGetError, ThrowOnError>({
        ...options,
        url: '/user/{user_id}/groups/'
    });
};

/**
 * Create Group
 */
export const createGroupGroupPost = <ThrowOnError extends boolean = false>(options: Options<CreateGroupGroupPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateGroupGroupPostResponse, CreateGroupGroupPostError, ThrowOnError>({
        ...options,
        url: '/group/'
    });
};

/**
 * Get Group By Id
 */
export const getGroupByIdGroupGroupIdGet = <ThrowOnError extends boolean = false>(options: Options<GetGroupByIdGroupGroupIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetGroupByIdGroupGroupIdGetResponse, GetGroupByIdGroupGroupIdGetError, ThrowOnError>({
        ...options,
        url: '/group/{group_id}'
    });
};

/**
 * Create Post
 */
export const createPostPostPost = <ThrowOnError extends boolean = false>(options: Options<CreatePostPostPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreatePostPostPostResponse, CreatePostPostPostError, ThrowOnError>({
        ...options,
        url: '/post/'
    });
};

/**
 * Get Post By Id
 */
export const getPostByIdPostPostIdGet = <ThrowOnError extends boolean = false>(options: Options<GetPostByIdPostPostIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPostByIdPostPostIdGetResponse, GetPostByIdPostPostIdGetError, ThrowOnError>({
        ...options,
        url: '/post/{post_id}'
    });
};

/**
 * Delete Post By Id
 */
export const deletePostByIdPostPostIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeletePostByIdPostPostIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeletePostByIdPostPostIdDeleteResponse, DeletePostByIdPostPostIdDeleteError, ThrowOnError>({
        ...options,
        url: '/post/{post_id}'
    });
};

/**
 * Create Comment
 */
export const createCommentPostPostIdCommentPost = <ThrowOnError extends boolean = false>(options: Options<CreateCommentPostPostIdCommentPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateCommentPostPostIdCommentPostResponse, CreateCommentPostPostIdCommentPostError, ThrowOnError>({
        ...options,
        url: '/post/{post_id}/comment'
    });
};

/**
 * Get Comments By Post Id
 */
export const getCommentsByPostIdPostPostIdCommentGet = <ThrowOnError extends boolean = false>(options: Options<GetCommentsByPostIdPostPostIdCommentGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCommentsByPostIdPostPostIdCommentGetResponse, GetCommentsByPostIdPostPostIdCommentGetError, ThrowOnError>({
        ...options,
        url: '/post/{post_id}/comment'
    });
};

/**
 * Delete Comment By Id
 */
export const deleteCommentByIdPostPostIdCommentCommentIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCommentByIdPostPostIdCommentCommentIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteCommentByIdPostPostIdCommentCommentIdDeleteResponse, DeleteCommentByIdPostPostIdCommentCommentIdDeleteError, ThrowOnError>({
        ...options,
        url: '/post/{post_id}/comment/{comment_id}'
    });
};

/**
 * Like Post
 */
export const likePostPostPostIdLikePost = <ThrowOnError extends boolean = false>(options: Options<LikePostPostPostIdLikePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<LikePostPostPostIdLikePostResponse, LikePostPostPostIdLikePostError, ThrowOnError>({
        ...options,
        url: '/post/{post_id}/like'
    });
};

/**
 * Get Likes By Post Id
 */
export const getLikesByPostIdPostPostIdLikeGet = <ThrowOnError extends boolean = false>(options: Options<GetLikesByPostIdPostPostIdLikeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLikesByPostIdPostPostIdLikeGetResponse, GetLikesByPostIdPostPostIdLikeGetError, ThrowOnError>({
        ...options,
        url: '/post/{post_id}/like'
    });
};

/**
 * Remove Likes
 */
export const removeLikesPostsPostIdLikeDelete = <ThrowOnError extends boolean = false>(options: Options<RemoveLikesPostsPostIdLikeDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<RemoveLikesPostsPostIdLikeDeleteResponse, RemoveLikesPostsPostIdLikeDeleteError, ThrowOnError>({
        ...options,
        url: '/posts/{post_id}/like'
    });
};

/**
 * Get Posts By User Id
 */
export const getPostsByUserIdUserUserIdPostsGet = <ThrowOnError extends boolean = false>(options: Options<GetPostsByUserIdUserUserIdPostsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPostsByUserIdUserUserIdPostsGetResponse, GetPostsByUserIdUserUserIdPostsGetError, ThrowOnError>({
        ...options,
        url: '/user/{user_id}/posts/'
    });
};

/**
 * Join Group
 */
export const joinGroupUserUserIdGroupsGroupIdJoinPost = <ThrowOnError extends boolean = false>(options: Options<JoinGroupUserUserIdGroupsGroupIdJoinPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<JoinGroupUserUserIdGroupsGroupIdJoinPostResponse, JoinGroupUserUserIdGroupsGroupIdJoinPostError, ThrowOnError>({
        ...options,
        url: '/user/{user_id}/groups/{group_id}/join'
    });
};